// Code generated by go-bindata.
// sources:
// data/assets/catalog.json
// DO NOT EDIT!

package data

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _assetsCatalogJson = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x84\x92\x3f\x6f\xdb\x30\x10\xc5\x77\x7f\x8a\x03\x01\x77\xaa\x44\x59\x4a\xac\x44\x5b\xdb\x2c\x45\x81\x74\x48\x8b\x0e\x45\x86\x13\x79\xa6\x09\x53\x24\x41\x32\x36\x02\xc3\xdf\xbd\x90\x52\xeb\x4f\xd1\xa2\x8b\x80\x3b\x3d\x92\xbf\x7b\xf7\xce\x2b\x00\x16\x29\x1c\xb5\xa0\xc8\x9a\x9f\x2b\x00\x80\xf3\xf0\x05\x60\x5a\xb2\x86\xdd\xe0\xbd\xac\x68\x83\x59\xb5\x2d\x30\xdb\x6c\xa8\xce\xda\xdb\x9b\x3a\x2b\xab\xad\x10\xa2\x90\xdb\x1d\xb6\xec\xfd\xf5\x88\xc5\x8e\x58\xc3\x62\xc2\x70\x40\x2b\x4f\xf8\x6a\x29\x3b\xe0\xee\x80\x93\x46\x52\x14\x41\xfb\xa4\x9d\x65\x0d\xfb\xe0\x51\xec\x09\xbe\x2c\x35\xad\xb6\x12\x5b\x43\xac\x81\x14\x5e\x68\xec\x27\x54\x23\xe7\xd0\x78\xbb\xfb\x77\xfd\x3c\xea\x3a\x4a\x28\x31\x21\x6b\xce\x93\x56\xea\xe8\x0d\xbe\x3e\xbe\x31\x3e\xf5\x8c\xf0\x0e\x7e\xf4\x8c\x7f\xbc\xdf\x0f\xdf\xa1\xa2\xef\xc1\xb0\x86\xed\x53\xf2\xb1\xe1\x3c\x1e\x6d\x8e\x03\x6e\xee\x82\xe2\x81\xbc\x8b\x1c\xe3\x8e\x0f\x10\x3c\xea\x44\xdc\x38\xe5\x22\x77\x41\x2b\x6d\xd1\x44\xee\xad\xe2\x9f\x3f\x7d\x7d\x5c\x97\x45\xb6\x2e\x8b\x8f\x06\xc5\x61\x5d\x16\xce\xae\xcb\xe2\x5b\x40\x1b\x3d\x06\xb2\x29\xf7\x56\xcd\x5f\x37\xce\xaa\x87\xff\xfb\x04\xc0\x7c\x70\x47\x2d\x29\x3c\xfc\x7b\xb8\xb9\x5c\x3a\xf1\xd2\x91\x4d\xd8\x5f\xbb\x1c\xef\x74\x3a\xe5\x52\x5b\xe5\x92\x36\x14\x73\xe1\x3a\x3e\x94\xd9\xc2\xe3\xcb\xe8\xb1\x37\x68\x17\xcb\x98\xac\x1e\xc3\x73\x57\x16\xb2\xac\xc4\x2c\x3c\xf7\x7d\x78\x64\x7d\x57\xd7\x05\x56\x95\xb8\x6d\x67\x74\x53\x80\x92\xf3\x5a\x2c\xff\x2c\x63\xf3\xb4\xc7\x40\x80\xf0\x17\xe1\xb4\xfb\x05\x11\x00\x13\x2e\x26\xd6\x40\x31\xeb\x5e\x16\x47\x77\x81\xae\x91\x1b\xdb\x97\x6b\xb8\x56\xd7\xea\x79\x75\x59\xfd\x0a\x00\x00\xff\xff\x0f\x87\x9d\x42\x3a\x03\x00\x00")

func assetsCatalogJsonBytes() ([]byte, error) {
	return bindataRead(
		_assetsCatalogJson,
		"assets/catalog.json",
	)
}

func assetsCatalogJson() (*asset, error) {
	bytes, err := assetsCatalogJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/catalog.json", size: 826, mode: os.FileMode(420), modTime: time.Unix(1510431625, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"assets/catalog.json": assetsCatalogJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"assets": &bintree{nil, map[string]*bintree{
		"catalog.json": &bintree{assetsCatalogJson, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

